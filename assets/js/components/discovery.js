class DiscoveryHandler {
    constructor(app) {
        this.app = app;
        this.currentIndex = 0;
        this.init();
    }

    init() {
        this.cacheElements();
        this.setupEventListeners();
    }

    cacheElements() {
        this.elements = {
            discoveryCard: document.getElementById('discoveryCard'),
            avatar: document.getElementById('discoveryAvatar'),
            name: document.getElementById('discoveryName'),
            age: document.getElementById('discoveryAge'),
            city: document.getElementById('discoveryCity'),
            bio: document.getElementById('discoveryBio'),
            lookingFor: document.getElementById('discoveryLookingFor'),
            interests: document.getElementById('discoveryInterests'),
            likeBtn: document.getElementById('likeBtn'),
            passBtn: document.getElementById('passBtn'),
            noProfilesMessage: document.getElementById('noProfilesMessage')
        };
    }

    setupEventListeners() {
        if (this.elements.likeBtn) {
            this.elements.likeBtn.addEventListener('click', () => this.handleLike());
        }
        if (this.elements.passBtn) {
            this.elements.passBtn.addEventListener('click', () => this.handlePass());
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    generateRandomProfiles(count = 20) {
        const profiles = [];
        const namesMale = ['–ò–≤–∞–Ω', '–î–º–∏—Ç—Ä–∏–π', '–ê–ª–µ–∫—Å–µ–π', '–°–µ—Ä–≥–µ–π', '–ú–∞–∫—Å–∏–º', '–ê–Ω–¥—Ä–µ–π', '–ù–∏–∫–æ–ª–∞–π', '–ê—Ä—Ç–µ–º', '–ï–≥–æ—Ä', '–ü–∞–≤–µ–ª'];
        const namesFemale = ['–ê–Ω–Ω–∞', '–ú–∞—Ä–∏—è', '–ï–ª–µ–Ω–∞', '–û–ª—å–≥–∞', '–ù–∞—Ç–∞–ª—å—è', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–°–æ—Ñ–∏—è', '–í–∏–∫—Ç–æ—Ä–∏—è', '–î–∞—Ä—å—è', '–ê–Ω–∞—Å—Ç–∞—Å–∏—è'];
        const cities = ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å', '–°–æ—á–∏', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', '–°–∞–º–∞—Ä–∞', '–£—Ñ–∞'];
        const descriptions = [
            '–õ—é–±–ª—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞.',
            '–£–≤–ª–µ–∫–∞—é—Å—å —á—Ç–µ–Ω–∏–µ–º —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏ –∏ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–º–∏ –∏–≥—Ä–∞–º–∏.',
            '–ò—â—É –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞.',
            '–¶–µ–Ω—é –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞.',
            '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, —Ö—É–¥–æ–∂–Ω–∏–∫ –≤ –¥—É—à–µ.',
            '–û–±–æ–∂–∞—é –≥–æ—Ç–æ–≤–∏—Ç—å –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ö–Ω–µ.',
            '–ú–µ—á—Ç–∞—é –æ –∫—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏.',
            '–ó–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º –∏ –≤–µ–¥—É –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏.',
            '–ò—â—É –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –º–µ–ª–æ—á–∞—Ö.',
            '–õ—é–±–ª—é –¥–æ–ª–≥–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –±–µ—Å–µ–¥—ã.',
            '–í—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π.',
            '–ò—â—É —á–µ–ª–æ–≤–µ–∫–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ä–∞–¥–æ—Å—Ç–∏ –∏ –ø–µ—á–∞–ª–∏.',
            '–ú–æ—è –∂–∏–∑–Ω—å - —ç—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ.',
            '–õ—é–±–ª—é –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –ø—Ä–∏—Ä–æ–¥—É.',
            '–£–≤–ª–µ–∫–∞—é—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞.'
        ];

        for (let i = 0; i < count; i++) {
            const randomGender = Math.random() > 0.5 ? 'male' : 'female';
            const randomName = randomGender === 'male' 
                ? namesMale[Math.floor(Math.random() * namesMale.length)]
                : namesFemale[Math.floor(Math.random() * namesFemale.length)];
            
            const randomAge = Math.floor(Math.random() * (40 - 20 + 1)) + 20;
            const randomCity = cities[Math.floor(Math.random() * cities.length)];
            const randomDescription = descriptions[Math.floor(Math.random() * descriptions.length)];
            const randomColor = this.app.config.colors[Math.floor(Math.random() * this.app.config.colors.length)];

            const randomLookingFor = [];
            const numLookingFor = Math.floor(Math.random() * 3) + 1; // 1-3 options
            const shuffledLookingFor = [...this.app.config.lookingForOptions].sort(() => 0.5 - Math.random());
            for (let j = 0; j < numLookingFor; j++) {
                randomLookingFor.push(shuffledLookingFor[j].id);
            }

            const randomInterests = [];
            const numInterests = Math.floor(Math.random() * this.app.config.maxInterests) + 1; // 1-maxInterests
            const shuffledInterests = [...this.app.config.interests].sort(() => 0.5 - Math.random());
            for (let j = 0; j < numInterests; j++) {
                randomInterests.push(shuffledInterests[j].id);
            }

            profiles.push({
                id: `profile_${i}`,
                name: randomName,
                age: randomAge,
                gender: randomGender,
                city: randomCity,
                description: randomDescription,
                profileColor: randomColor,
                avatar: `https://picsum.photos/seed/${randomName}${randomAge}${randomGender}/120/120`, // Random avatar image
                photos: Array.from({ length: Math.floor(Math.random() * 4) + 1 }, (_, k) => `https://picsum.photos/seed/${randomName}${randomAge}${randomGender}${k}/100/100`),
                lookingFor: randomLookingFor,
                interests: randomInterests,
                location: { lat: 55.7558 + (Math.random() - 0.5) * 0.1, lng: 37.6173 + (Math.random() - 0.5) * 0.1 } // Moscow area
            });
        }
        return profiles;
    }

    startDiscovery() {
        const allGeneratedProfiles = this.generateRandomProfiles(30); // –£–≤–µ–ª–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ª—É—á—à–µ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        const userPreference = this.app.state.userData.preference;
        const userGender = this.app.state.userData.gender;

        this.app.state.suggestedProfiles = allGeneratedProfiles.filter(profile => {
            // –ò—Å–∫–ª—é—á–∞–µ–º —Å–≤–æ–π –ø–æ–ª, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π
            if (userPreference === 'male' && profile.gender !== 'male') return false;
            if (userPreference === 'female' && profile.gender !== 'female') return false;
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç "–≤—Å–µ—Ö", —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö, –∫—Ä–æ–º–µ —Å–µ–±—è
            if (userPreference === 'both' && profile.gender === userGender) {
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç "–≤—Å–µ—Ö", –Ω–æ –µ–≥–æ –ø–æ–ª —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ–ª–æ–º –ø—Ä–æ—Ñ–∏–ª—è,
                // —Ç–æ –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å, —Ç–∞–∫ –∫–∞–∫ "–≤—Å–µ—Ö" –≤–∫–ª—é—á–∞–µ—Ç –∏ —Å–≤–æ–π –ø–æ–ª.
                // –ï—Å–ª–∏ –±—ã –º—ã —Ö–æ—Ç–µ–ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Å–≤–æ–π –ø–æ–ª –ø—Ä–∏ "both", –ª–æ–≥–∏–∫–∞ –±—ã–ª–∞ –±—ã –¥—Ä—É–≥–æ–π.
                // –¢–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞: "both" = male + female.
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å male –∏ –∏—â–µ—Ç both, –µ–º—É –ø–æ–∫–∞–∂—É—Ç male –∏ female.
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å female –∏ –∏—â–µ—Ç both, –µ–º—É –ø–æ–∫–∞–∂—É—Ç male –∏ female.
                return true;
            }
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª, –∏ —ç—Ç–æ—Ç –ø–æ–ª —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ–ª–æ–º –ø—Ä–æ—Ñ–∏–ª—è
            if ((userPreference === 'male' && profile.gender === 'male') || 
                (userPreference === 'female' && profile.gender === 'female')) {
                return true;
            }

            return false;
        });

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –±—ã –æ–Ω –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ)
        // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –≤–∫–ª—é—á–∞—é—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ —ç—Ç–æ —Ö–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.
        this.app.state.suggestedProfiles = this.app.state.suggestedProfiles.filter(profile => profile.id !== this.app.state.userData.id);


        this.app.state.likedProfiles = [];
        this.app.state.passedProfiles = [];
        this.currentIndex = 0;
        this.showNextProfile();
    }

    showNextProfile() {
        if (this.currentIndex >= this.app.state.suggestedProfiles.length) {
            this.elements.discoveryCard.style.display = 'none';
            this.elements.noProfilesMessage.style.display = 'block';
            return;
        }

        this.elements.discoveryCard.style.display = 'flex';
        this.elements.noProfilesMessage.style.display = 'none';

        const profile = this.app.state.suggestedProfiles[this.currentIndex];
        this.renderProfile(profile);
    }

    renderProfile(profile) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –ø–æ–¥–±–æ—Ä–∫–∏
        this.app.profileHandler.applyProfileColor(profile.profileColor); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ ProfileHandler

        this.elements.name.textContent = profile.name;
        if (profile.gender) {
            const genderEmoji = profile.gender === 'male' ? 'üë®' : 'üë©';
            this.elements.name.textContent += ` ${genderEmoji}`;
        }
        this.elements.age.textContent = profile.age ? `${profile.age} –ª–µ—Ç` : '';
        this.elements.city.textContent = profile.city ? `, ${profile.city}` : '';
        this.elements.bio.textContent = profile.description || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –æ —Å–µ–±–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª';
        
        if (profile.avatar) {
            this.elements.avatar.style.backgroundImage = `url(${profile.avatar})`;
            this.elements.avatar.innerHTML = '';
        } else {
            this.elements.avatar.style.backgroundImage = '';
            this.elements.avatar.innerHTML = '<span class="avatar-placeholder">üë§</span>';
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª—ã "–ò—â—É" –∏ "–ò–Ω—Ç–µ—Ä–µ—Å—ã" –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–¥–±–æ—Ä–∫–∏
        this.updateLookingFor(profile.lookingFor, this.app.config.lookingForOptions, this.elements.lookingFor);
        this.updateInterests(profile.interests, this.app.config.interests, this.elements.interests);

        // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏
        this.elements.discoveryCard.style.transition = 'none';
        this.elements.discoveryCard.style.transform = 'translateX(0) rotate(0)';
        this.elements.discoveryCard.style.opacity = '1';
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Ñ–ª–æ—É –¥–ª—è —Å–±—Ä–æ—Å–∞ transition
        void this.elements.discoveryCard.offsetWidth; 
        this.elements.discoveryCard.style.transition = 'all var(--transition-normal) ease';
    }

    updateLookingFor(lookingFor, options, container) {
        if (!container) return;
        container.innerHTML = '';
        if (lookingFor && lookingFor.length > 0) {
            const lookingForContainer = document.createElement('div');
            lookingForContainer.className = 'looking-for-container';
            lookingFor.forEach(optionId => {
                const option = options.find(o => o.id === optionId);
                if (option) {
                    const el = document.createElement('div');
                    el.className = 'looking-for-item';
                    el.innerHTML = `
                        <div class="looking-for-emoji">${option.emoji}</div>
                        <div class="looking-for-text">${option.name}</div>
                    `;
                    lookingForContainer.appendChild(el);
                }
            });
            container.appendChild(lookingForContainer);
        } else {
            container.innerHTML = '<div class="no-data">–ù–µ —É–∫–∞–∑–∞–Ω–æ, —á—Ç–æ –∏—â–µ—Ç</div>';
        }
    }

    updateInterests(userInterests, configInterests, container) {
        if (!container) return;
        container.innerHTML = '';
        if (userInterests && userInterests.length > 0) {
            const interestsContainer = document.createElement('div');
            interestsContainer.className = 'interests-container';
            userInterests.forEach(interestId => {
                const interest = configInterests.find(i => i.id === interestId);
                if (interest) {
                    const el = document.createElement('div');
                    el.className = 'interest-item';
                    el.innerHTML = `
                        <div class="interest-emoji">${interest.emoji}</div>
                        <div class="interest-text">${interest.name}</div>
                    `;
                    interestsContainer.appendChild(el);
                }
            });
            container.appendChild(interestsContainer);
        } else {
            container.innerHTML = '<div class="no-data">–ò–Ω—Ç–µ—Ä–µ—Å—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã</div>';
        }
    }

    handleLike() {
        const profile = this.app.state.suggestedProfiles[this.currentIndex];
        this.app.state.likedProfiles.push(profile);
        this.animateCard('like');
        this.currentIndex++;
        setTimeout(() => this.showNextProfile(), 500);
    }

    handlePass() {
        const profile = this.app.state.suggestedProfiles[this.currentIndex];
        this.app.state.passedProfiles.push(profile);
        this.animateCard('pass');
        this.currentIndex++;
        setTimeout(() => this.showNextProfile(), 500);
    }

    animateCard(action) {
        const card = this.elements.discoveryCard;
        card.style.transition = 'all 0.5s ease-out';
        card.style.transform = action === 'like' 
            ? 'translateX(100%) rotate(15deg)' 
            : 'translateX(-100%) rotate(-15deg)';
        card.style.opacity = '0';
    }
}
